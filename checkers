from tkinter import *


class CheckerTile(Canvas):
    '''represents a square in checkers'''

    def __init__(self, master, r, c):
        Canvas.__init__(self, master, width=50, height=50,
                        bg='blanched almond', highlightthickness=0)
        odd = [1, 3, 5, 7]
        even = [0, 2, 4, 6, 8]
        if r in odd and c not in odd:
            self['bg'] = 'dark green'
        if r in even and c not in even:
            self['bg'] = 'dark green'
        self.grid(row=r, column=c)
        self.coord = (r, c)
        self.selected = False
        self.bind('<Button-1>', self.selected)

    def selected(self):
        '''NOT WORKING'''
        self.selected = not self.selected
        if self.selected:
            self.create_text(25, 25, text='*')
            # self['highlightthickness'] = 5
            # self['fg'] = 'black'
        else:
            self['text'] = ''
            # self['highlightthickness'] = 0
            # self['fg'] = self['bg']

    def make_color(self, color):
        '''ReversiSquare.make_color(color)
        changes color of piece on square to specified color'''
        self.delete_piece()
        self.create_oval(9, 9, 40, 40, fill=color)

    def delete_piece(self):
        ovalList = self.find_all()  # remove existing piece
        for oval in ovalList:
            self.delete(oval)

class CheckerBoard:

    def __init__(self, master):
        self.tiles = {}
        for row in range(8):
            for column in range(8):
                rc = (row, column)
                self.tiles[rc] = CheckerTile(master, row, column)
        for tile in self.tiles:
            if self.tiles[tile]['bg'] != 'blanched almond':
                if self.tiles[tile].coord[0] in range(3):
                    self.tiles[tile].make_color('red')
                if self.tiles[tile].coord[0] in range(5, 8):
                    self.tiles[tile].make_color('white')


class CheckerGame(Frame):

    def __init__(self, master):
        Frame.__init__(self, master, bg='white')
        self.grid()
        self.board = CheckerBoard(self)
        self.currentPlayer = 0
        # create indicator squares and score labels
        self.colors = ['red', 'white']
        self.turnSquare = CheckerTile(self, 9, 2)
        self.turnSquare.make_color(self.colors[self.currentPlayer])
        self.turnLabel = Label(self, width=3, height=1, bg='white', text='Turn:', fg='black')
        self.turnLabel.grid(row=9, column=1)

    def get_click(self, event):
        coords = event.widget.get_position()
        if self.board.tiles[coords].selected:
            origpiece = coords
        else:
            newposition = coords
            self.move_piece(coords)

    def move_piece(self, coords):
        if True:
            self.board.tiles[coords].delete_piece()

    def validate(self, coords):
        pass


def play_checkers():
    root = Tk()
    root.title('Checkers')
    C = CheckerGame(root)
    C.mainloop()

play_checkers()
